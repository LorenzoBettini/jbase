/*
 * generated by Xtext
 */
package jbase

import jbase.compiler.JbaseJvmModelGenerator
import jbase.compiler.JbaseXbaseCompiler
import jbase.controlflow.JbaseEarlyExitComputer
import jbase.conversion.JbaseValueConverterService
import jbase.imports.JbaseRewritableImportSection.JbaseRewritableImportSectionFactory
import jbase.scoping.JbaseImplicitlyImportedFeatures
import jbase.scoping.featurecalls.JbaseOperatorMapping
import jbase.typesystem.JbaseExpressionArgumentFactory
import jbase.typesystem.JbaseTypeComputer
import jbase.validation.JbaseConfigurableIssueCodes
import org.eclipse.xtext.conversion.IValueConverterService
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.validation.ConfigurableIssueCodesProvider
import org.eclipse.xtext.xbase.compiler.XbaseCompiler
import org.eclipse.xtext.xbase.controlflow.IEarlyExitComputer
import org.eclipse.xtext.xbase.imports.RewritableImportSection
import org.eclipse.xtext.xbase.scoping.batch.ImplicitlyImportedFeatures
import org.eclipse.xtext.xbase.scoping.featurecalls.OperatorMapping
import org.eclipse.xtext.xbase.typesystem.computation.ITypeComputer
import org.eclipse.xtext.xbase.typesystem.internal.ExpressionArgumentFactory

/** 
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class JbaseRuntimeModule extends AbstractJbaseRuntimeModule {
	override Class<? extends IValueConverterService> bindIValueConverterService() {
		return JbaseValueConverterService
	}

	def Class<? extends OperatorMapping> bindOperatorMapping() {
		return JbaseOperatorMapping
	}

	def Class<? extends ITypeComputer> bindITypeComputer() {
		return JbaseTypeComputer
	}

	def Class<? extends ExpressionArgumentFactory> bindExpressionArgumentFactory() {
		return JbaseExpressionArgumentFactory
	}

	def Class<? extends IEarlyExitComputer> bindIEarlyExitComputer() {
		return JbaseEarlyExitComputer
	}

	override Class<? extends IGenerator> bindIGenerator() {
		return JbaseJvmModelGenerator
	}

	def Class<? extends XbaseCompiler> bindXbaseCompiler() {
		return JbaseXbaseCompiler
	}

	def Class<? extends RewritableImportSection.Factory> bindRewritableImportSection$Factory() {
		return JbaseRewritableImportSectionFactory
	}

	override Class<? extends ConfigurableIssueCodesProvider> bindConfigurableIssueCodesProvider() {
		return JbaseConfigurableIssueCodes
	}

	def Class<? extends ImplicitlyImportedFeatures> bindImplicitlyImportedFeatures() {
		return JbaseImplicitlyImportedFeatures
	}
}
