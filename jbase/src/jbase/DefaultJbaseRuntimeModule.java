/*
 * generated by Xtext
 */
package jbase;

import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.validation.ConfigurableIssueCodesProvider;
import org.eclipse.xtext.xbase.DefaultXbaseRuntimeModule;
import org.eclipse.xtext.xbase.compiler.XbaseCompiler;
import org.eclipse.xtext.xbase.controlflow.IEarlyExitComputer;
import org.eclipse.xtext.xbase.imports.RewritableImportSection;
import org.eclipse.xtext.xbase.scoping.batch.ImplicitlyImportedFeatures;
import org.eclipse.xtext.xbase.scoping.featurecalls.OperatorMapping;
import org.eclipse.xtext.xbase.typesystem.computation.ITypeComputer;
import org.eclipse.xtext.xbase.typesystem.internal.ExpressionArgumentFactory;

import jbase.compiler.JbaseJvmModelGenerator;
import jbase.compiler.JbaseXbaseCompiler;
import jbase.controlflow.JbaseEarlyExitComputer;
import jbase.conversion.JbaseValueConverterService;
import jbase.formatting2.JbaseFormatter;
import jbase.imports.JbaseRewritableImportSection.JbaseRewritableImportSectionFactory;
import jbase.scoping.JbaseImplicitlyImportedFeatures;
import jbase.scoping.featurecalls.JbaseOperatorMapping;
import jbase.typesystem.JbaseExpressionArgumentFactory;
import jbase.typesystem.JbaseTypeComputer;
import jbase.validation.JbaseConfigurableIssueCodes;

/**
 * This is meant to be used as the default base class for DSLs using Jbase.
 * 
 * @author Lorenzo Bettini
 */
public class DefaultJbaseRuntimeModule extends DefaultXbaseRuntimeModule {

	@Override
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return JbaseValueConverterService.class;
	}

	public Class<? extends OperatorMapping> bindOperatorMapping() {
		return JbaseOperatorMapping.class;
	}

	public Class<? extends ITypeComputer> bindITypeComputer() {
		return JbaseTypeComputer.class;
	}

	public Class<? extends ExpressionArgumentFactory> bindExpressionArgumentFactory() {
		return JbaseExpressionArgumentFactory.class;
	}

	public Class<? extends IEarlyExitComputer> bindIEarlyExitComputer() {
		return JbaseEarlyExitComputer.class;
	}

	@Override
	public Class<? extends IGenerator> bindIGenerator() {
		return JbaseJvmModelGenerator.class;
	}

	public Class<? extends XbaseCompiler> bindXbaseCompiler() {
		return JbaseXbaseCompiler.class;
	}

	public Class<? extends RewritableImportSection.Factory> bindRewritableImportSection$Factory() {
		return JbaseRewritableImportSectionFactory.class;
	}

	@Override
	public Class<? extends ConfigurableIssueCodesProvider> bindConfigurableIssueCodesProvider() {
		return JbaseConfigurableIssueCodes.class;
	}

	public Class<? extends ImplicitlyImportedFeatures> bindImplicitlyImportedFeatures() {
		return JbaseImplicitlyImportedFeatures.class;
	}

	public Class<? extends org.eclipse.xtext.formatting2.IFormatter2> bindIFormatter2() {
		return JbaseFormatter.class;
	}

	public void configureFormatterPreferences(com.google.inject.Binder binder) {
		binder.bind(org.eclipse.xtext.preferences.IPreferenceValuesProvider.class).annotatedWith(org.eclipse.xtext.formatting2.FormatterPreferences.class).to(org.eclipse.xtext.formatting2.FormatterPreferenceValuesProvider.class);
	}
}
