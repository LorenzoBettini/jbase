/*
 * generated by Xtext
 */
package jbase;

import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.validation.ConfigurableIssueCodesProvider;
import org.eclipse.xtext.xbase.compiler.XbaseCompiler;
import org.eclipse.xtext.xbase.controlflow.IEarlyExitComputer;
import org.eclipse.xtext.xbase.imports.RewritableImportSection;
import org.eclipse.xtext.xbase.scoping.featurecalls.OperatorMapping;
import org.eclipse.xtext.xbase.typesystem.computation.ITypeComputer;
import org.eclipse.xtext.xbase.typesystem.internal.ExpressionArgumentFactory;

import jbase.compiler.JbaseJvmModelGenerator;
import jbase.compiler.JbaseXbaseCompiler;
import jbase.controlflow.JbaseEarlyExitComputer;
import jbase.conversion.JbaseValueConverterService;
import jbase.imports.JbaseRewritableImportSection.JbaseRewritableImportSectionFactory;
import jbase.scoping.featurecalls.JbaseOperatorMapping;
import jbase.typesystem.JbaseExpressionArgumentFactory;
import jbase.typesystem.JbaseTypeComputer;
import jbase.validation.JbaseConfigurableIssueCodes;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class JbaseRuntimeModule extends jbase.AbstractJbaseRuntimeModule {

	@Override
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return JbaseValueConverterService.class;
	}

	public Class<? extends OperatorMapping> bindOperatorMapping() {
		return JbaseOperatorMapping.class;
	}

	public Class<? extends ITypeComputer> bindITypeComputer() {
		return JbaseTypeComputer.class;
	}

	public Class<? extends ExpressionArgumentFactory> bindExpressionArgumentFactory() {
		return JbaseExpressionArgumentFactory.class;
	}

	public Class<? extends IEarlyExitComputer> bindIEarlyExitComputer() {
		return JbaseEarlyExitComputer.class;
	}

	@Override
	public Class<? extends IGenerator> bindIGenerator() {
		return JbaseJvmModelGenerator.class;
	}

	public Class<? extends XbaseCompiler> bindXbaseCompiler() {
		return JbaseXbaseCompiler.class;
	}

	public Class<? extends RewritableImportSection.Factory> bindRewritableImportSection$Factory() {
		return JbaseRewritableImportSectionFactory.class;
	}

	@Override
	public Class<? extends ConfigurableIssueCodesProvider> bindConfigurableIssueCodesProvider() {
		return JbaseConfigurableIssueCodes.class;
	}
}
