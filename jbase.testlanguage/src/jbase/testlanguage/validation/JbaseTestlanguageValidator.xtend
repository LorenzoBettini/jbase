/*
 * generated by Xtext
 */
package jbase.testlanguage.validation

import jbase.testlanguage.jbaseTestlanguage.AbstractOperation
import jbase.testlanguage.jbaseTestlanguage.JbaseTestLanguageModel
import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.xbase.XBlockExpression
import com.google.inject.Singleton

/**
 * This class contains custom validation rules for our test language.
 * 
 * This class is a singleton because we want to set specific fields in our tests,
 * so we want to make sure there's only a single instance that will be used
 * during our tests.
 */
@Singleton
class JbaseTestlanguageValidator extends AbstractJbaseTestlanguageValidator {

	/**
	 * For testing purposes
	 */
	var boolean skipVariableInitializationCheck = false

	def setSkipVariableInitializationCheck(boolean b) {
		skipVariableInitializationCheck = b
	}

	@Check
	def void checkReturnInOperation(AbstractOperation op) {
		checkMissingReturn(op.body as XBlockExpression)
	}

	@Check
	def void checkVariableInitializationInMainBlock(JbaseTestLanguageModel m) {
		if (!skipVariableInitializationCheck)
			checkVariableInitialization(m.block)
	}

	@Check
	def void checkVariableInitializationInOperation(AbstractOperation op) {
		if (!skipVariableInitializationCheck)
			checkVariableInitialization(op.body as XBlockExpression)
	}
}
